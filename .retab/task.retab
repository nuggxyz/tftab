
gen taskfile {
	schema = "https://taskfile.dev/schema.json"
	path   = "../Taskfile.yml"
	data = {
		version = 3
		tasks = {
			// mockery-bin = arg.sup.mockery-bin
			gotestsum-bin = {
				generates = ["bin/gotestsum"]
				dir       = "toolsabc"
				sources   = ["**/*", { exclude = "bin/**/*" }]
				cmds = [
					"GOWORK=off go build -mod=vendor -o ./bin/gotestsum gotest.tools/gotestsum"
				]
			}
						golangci-lint-bin = {
				generates = ["bin/golangci-lint"]
				dir       = "tools"
				sources   = gen.taskfile.data.tasks.default.deps
				cmds = [
					base64encode("GOWORK=off go build -mod=vendor -o ./bin/golangci-lint github.com/golangci/golangci-lint/cmd/golangci-lint")
				]
			}
			mockery-gen = {
				deps      = ["mockery-bin"]
				generates = ["gen/mockery/**/*"]
				dir       = "."
				sources   = ["**/*.go", "./.mockery.yaml", "./tools/bin/mockery"]
				cmds = [
					"./tools/bin/mockery --dir ./gen/mockery --config ./.mockery.yaml"
				]
			}
			lint = {
				deps = ["golangci-lint-bin"]
				sources = [
					"**/*.go",
					{ exclude = "tools/**/*" },
					"./tools/bin/golangci-lint",
				]

				cmds = [
					"GOWORK=off ./tools/bin/golangci-lint run --config ./.golangci.yml"
				]
			}
			test-ci = {
				deps = ["gotestsum-bin"]
				sources = [
					"**/*.go",
					{ exclude = "tools/**/*" },
					"./tools/bin/gotestsum"
				]
				preconditions = ["which go"]
				cmds = [
					"GOWORK=off ./tools/bin/gotestsum --junitfile test-reports/junit.xml -- -v -coverprofile=coverage.out -coverpkg=./... ./..."
				]
			}

			default = { deps = ["tools", "gen", "lint", "test"] }
		}
	}
}

args hello {
	desc = "hello world"
	cmds = [
		"echo hello"
	]
}

arg sup {
	mockery-bin = {
		generates = ["bin/mockery"]
		dir       = "tools"
		sources   = ["**/*", { exclude = "bin/**/*" }]
		cmds = [
			<<EOT
						GOWORK=off go build -mod=vendor -o ./bin/mockery github.com/vektra/mockery/v2
					EOT
		]
	}
	zzz = {
		abc = "def"
	}
}
