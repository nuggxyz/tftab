// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockery

import (
	hcl "github.com/hashicorp/hcl/v2"
	cty "github.com/zclconf/go-cty/cty"

	mock "github.com/stretchr/testify/mock"
)

// MockMeta_lang is an autogenerated mock type for the Meta type
type MockMeta_lang struct {
	mock.Mock
}

type MockMeta_lang_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeta_lang) EXPECT() *MockMeta_lang_Expecter {
	return &MockMeta_lang_Expecter{mock: &_m.Mock}
}

// Range provides a mock function with given fields:
func (_m *MockMeta_lang) Range() hcl.Range {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Range")
	}

	var r0 hcl.Range
	if rf, ok := ret.Get(0).(func() hcl.Range); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hcl.Range)
	}

	return r0
}

// MockMeta_lang_Range_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Range'
type MockMeta_lang_Range_Call struct {
	*mock.Call
}

// Range is a helper method to define mock.On call
func (_e *MockMeta_lang_Expecter) Range() *MockMeta_lang_Range_Call {
	return &MockMeta_lang_Range_Call{Call: _e.mock.On("Range")}
}

func (_c *MockMeta_lang_Range_Call) Run(run func()) *MockMeta_lang_Range_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMeta_lang_Range_Call) Return(_a0 hcl.Range) *MockMeta_lang_Range_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMeta_lang_Range_Call) RunAndReturn(run func() hcl.Range) *MockMeta_lang_Range_Call {
	_c.Call.Return(run)
	return _c
}

// Variables provides a mock function with given fields:
func (_m *MockMeta_lang) Variables() map[string]cty.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Variables")
	}

	var r0 map[string]cty.Value
	if rf, ok := ret.Get(0).(func() map[string]cty.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]cty.Value)
		}
	}

	return r0
}

// MockMeta_lang_Variables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Variables'
type MockMeta_lang_Variables_Call struct {
	*mock.Call
}

// Variables is a helper method to define mock.On call
func (_e *MockMeta_lang_Expecter) Variables() *MockMeta_lang_Variables_Call {
	return &MockMeta_lang_Variables_Call{Call: _e.mock.On("Variables")}
}

func (_c *MockMeta_lang_Variables_Call) Run(run func()) *MockMeta_lang_Variables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMeta_lang_Variables_Call) Return(_a0 map[string]cty.Value) *MockMeta_lang_Variables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMeta_lang_Variables_Call) RunAndReturn(run func() map[string]cty.Value) *MockMeta_lang_Variables_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMeta_lang creates a new instance of MockMeta_lang. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeta_lang(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeta_lang {
	mock := &MockMeta_lang{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
