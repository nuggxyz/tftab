name: build

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true
permissions:
    {
        id-token: write,
        contents: write,
        packages: write,
        actions: write,
        deployments: write,
        pull-requests: write,
        issues: write,
        statuses: write,
        checks: write,
    }
on:
    workflow_dispatch:
    pull_request:
        paths-ignore:
            - "README.md"
            - "docs/**"

    push:
        branches: [main]

env:
    BUILDX_VERSION: "latest"
    BUILDKIT_IMAGE: "moby/buildkit:latest"
    REPO_SLUG: ${{ github.repository }}
    DESTDIR: "./bin"
    TEST_CACHE_SCOPE: "test"
    DOCKERHUB_USERNAME: walteh
    MAIN_PLATFORM: linux/amd64
    MAIN_PLATFORM_UNDER: linux_amd64

jobs:
    tester:
        runs-on: ubuntu-22.04
        needs:
            - prepare
        steps:
            - name: checkout
              uses: actions/checkout@v4
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
            - name: download build
              uses: actions/download-artifact@v3
              with:
                  name: build
                  path: build-output
            - name: bake test
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: test
                  set: |
                      *.contexts.build=./build-output
                      *.output=./test-output
                      *.platform=${{ env.MAIN_PLATFORM }}
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max
            - name: bake tester
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: tester
                  set: |
                      *.contexts.test=./test-output
                      *.output=type=docker,name=tester,dest=./test-output/tester.tar
                      *.platform=${{ env.MAIN_PLATFORM }}
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max
            - name: upload test artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: test
                  path: ./test-output/*
                  if-no-files-found: error
            - name: send to codecov
              if: always()
              uses: codecov/codecov-action@v3
              with:
                  directory: ./test-output/reports
            - name: generate annotations
              if: always()
              uses: crazy-max/.github/.github/actions/gotest-annotations@1a64ea6d01db9a48aa61954cb20e265782c167d9
              with:
                  directory: ./test-output/reports
            - name: upload test reports
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: test-reports
                  path: ./test-output/reports/*

    unit:
        runs-on: ubuntu-22.04
        needs:
            - build
            - prepare
        strategy:
            matrix:
                package: ${{ fromJson(needs.prepare.outputs.package_matrix) }}
        steps:
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
            - name: download test artifacts
              uses: actions/download-artifact@v3
              with:
                  name: test
                  path: ./tester-output
            - name: load tester
              run: docker load < ./tester-output/tester.tar
            - name: run tests
              run: |
                  docker run --network host \
                    -e PKG=${{ matrix.package }} \
                    -e ARGS="-test.skip=Integration" \
                    -e NAME="unit" \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v ./testout:/out \
                    tester:latest
            - name: send to codecov
              if: always()
              uses: codecov/codecov-action@v3
              with:
                  directory: ./testout
            - name: generate annotations
              if: always()
              uses: crazy-max/.github/.github/actions/gotest-annotations@1a64ea6d01db9a48aa61954cb20e265782c167d9
              with:
                  directory: ./testout
            - name: upload test reports
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: test-reports
                  path: ./testout/*

    integration:
        runs-on: ubuntu-22.04
        needs:
            - build
            - prepare
        strategy:
            matrix:
                package: ${{ fromJson(needs.prepare.outputs.package_matrix) }}
        steps:
            - name: download test artifacts
              uses: actions/download-artifact@v3
              with:
                  name: test
                  path: ./tester-output
            - name: load tester
              run: docker load -i ./tester-output/tester.tar
            - name: run tests
              run: |
                  docker run --network host \
                    -e PKG=${{ matrix.package }} \
                    -e ARGS="-test.run=Integration" \
                    -e NAME="integration" \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v ./testout:/out \
                    tester:latest
            - name: send to codecov
              if: always()
              uses: codecov/codecov-action@v3
              with:
                  directory: ./testout
            - name: generate annotations
              if: always()
              uses: crazy-max/.github/.github/actions/gotest-annotations@1a64ea6d01db9a48aa61954cb20e265782c167d9
              with:
                  directory: ./testout
            - name: upload test reports
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: test-reports
                  path: ./testout/*

    prepare:
        runs-on: ubuntu-22.04
        outputs:
            build_matrix: ${{ steps.platforms.outputs.build_matrix }}
            validate_matrix: ${{ steps.platforms.outputs.validate_matrix }}
            package_matrix: ${{ steps.platforms.outputs.package_matrix }}
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
            - name: download meta
              uses: actions/download-artifact@v3
            - name: bake meta
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: meta
                  set: |
                      *.output=./meta-output
            - name: create matrix
              id: platforms
              run: |
                  echo "build_matrix=$(docker buildx bake build --print | jq -cr '.target.build.platforms')" >>${GITHUB_OUTPUT}
                  echo "validate_matrix=$(docker buildx bake validate --print | jq -cr '.group.validate.targets')" >>${GITHUB_OUTPUT}
                  echo "package_matrix=$(cat ./meta-output/${{ env.MAIN_PLATFORM_UNDER }}/meta/go-testable-packages | jq -cr 'map(split("/")[-1])')" >>${GITHUB_OUTPUT}
            - name: show matrix
              run: |
                  echo "build_matrix = ${{ steps.platforms.outputs.build_matrix }}"
                  echo "validate_matrix = ${{ steps.platforms.outputs.validate_matrix }}"
                  echo "package_matrix = ${{ steps.platforms.outputs.package_matrix }}"
            - id: upload-meta
              uses: actions/upload-artifact@v3
              with:
                  name: meta
                  path: ./meta-output

    build:
        runs-on: ubuntu-22.04
        needs:
            - prepare
        strategy:
            fail-fast: false
            matrix:
                platform: ${{ fromJson(needs.prepare.outputs.build_matrix) }}
        steps:
            - name: prepare
              id: prepare
              run: |
                  platform=${{ matrix.platform }}
                  echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_OUTPUT
                  echo "PLATFORM_PAIR_UNDERSCORE=${platform//\//_}" >> $GITHUB_OUTPUT
            - name: checkout
              uses: actions/checkout@v4
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
            - name: download meta
              uses: actions/download-artifact@v3
              with:
                  name: meta
                  path: meta-output
            - name: bake build
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: build
                  set: |
                      *.contexts.meta=./meta-output/${{ steps.prepare.outputs.PLATFORM_PAIR_UNDERSCORE }}
                      *.output=./build-output
                      *.platform=${{ matrix.platform }}
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max
            - name: upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build
                  path: ./build-output/*
                  if-no-files-found: error

    registry:
        runs-on: ubuntu-22.04
        needs:
            - release
        steps:
            - name: checkout
              uses: actions/checkout@v4
            - name: download build
              uses: actions/download-artifact@v3
              with:
                  name: build
                  path: build-output
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
            - name: download meta
              uses: actions/download-artifact@v3
              with:
                  name: meta
                  path: meta-output
            - id: meta
              run: |
                  echo "version=$(cat ./meta-output/meta/version)" >> $GITHUB_OUTPUT
                  echo "revision=$(cat ./meta-output/meta/revision)" >> $GITHUB_OUTPUT
            - name: docker meta
              id: docker-meta
              uses: docker/metadata-action@v4
              with:
                  images: |
                      ${{ env.REPO_SLUG }}
                      ghcr.io/${{ env.REPO_SLUG }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}},value=${{ steps.meta.outputs.version }},enable=${{ github.ref == 'refs/heads/main' }}
                      type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
                  bake-target: meta-helper
            - name: login to dockerhub
              uses: docker/login-action@v2
              with:
                  username: ${{ env.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}
            - name: login to ghcr
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: bake registry and push
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                      ${{ steps.meta.outputs.bake-file }}
                  targets: registry
                  push: true
                  sbom: true
                  set: |
                      *.contexts.meta=./meta-output
                      *.contexts.build=./build-output
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max

    release:
        runs-on: ubuntu-22.04
        needs:
            - unit
            - integration
            - validate
        steps:
            - name: checkout
              uses: actions/checkout@v4
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
            - name: download build
              uses: actions/download-artifact@v3
              with:
                  name: build
                  path: build-output
            - name: download meta
              uses: actions/download-artifact@v3
              with:
                  name: meta
                  path: meta-output
            - id: meta
              run: |
                  echo "version=$(cat ./meta-output/${{env.MAIN_PLATFORM_UNDER}}/meta/version)" >> $GITHUB_OUTPUT
                  echo "revision=$(cat ./meta-output/${{env.MAIN_PLATFORM_UNDER}}/meta/revision)" >> $GITHUB_OUTPUT
            - name: bake package
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: package
                  set: |
                      *.contexts.meta=./meta-output
                      *.contexts.build=./build-output
                      *.output=./package-output
            - name: list artifacts
              run: tree -nh ./package-output
            - name: check artifacts
              run: find ./package-output -type f -exec file -e ascii -- {} +
            - name: github release
              uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v0.1.15
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  draft: false
                  prerelease: true
                  files: ./package-output/*
                  tag_name: ${{ steps.meta.outputs.version }}
                  target_commitish: ${{ github.sha }}
                  name: ${{ steps.meta.outputs.version }}

    edge:
        runs-on: ubuntu-22.04
        continue-on-error: true
        env:
            DEBUG: "true"
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
              with:
                  version: latest
                  driver-opts: image=moby/buildkit:master
                  buildkitd-flags: --debug
            - name: bake build
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: build
                  set: |
                      *.platform=${{ env.MAIN_PLATFORM }}
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max

    validate:
        runs-on: ubuntu-22.04
        needs: [prepare]
        strategy:
            fail-fast: false
            matrix:
                target: ${{ fromJson(needs.prepare.outputs.validate_matrix) }}
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: set up buildx
              uses: docker/setup-buildx-action@v2
              with:
                  version: latest
            - name: download meta
              uses: actions/download-artifact@v3
              with:
                  name: meta
                  path: meta-output
            - name: build
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: ${{ matrix.target }}
                  set: |
                      *.contexts.meta=./meta-output
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max
